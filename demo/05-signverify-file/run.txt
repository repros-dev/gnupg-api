============= bash cell | delete the gnupg home directory and keys =============

# delete contents of GnuPG home directory for this REPRO
gnupg-runtime.purge-keys

--------------------------------- cell outputs ---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=========== bash cell | import the private key for repro@repros.dev ============

python3 << END_PYTHON

import gnupg

# read the private key from the file
with open("data/private.asc", "r") as private_key_file:
    private_key_text = private_key_file.read()

# import the private key and trust it
gpg = gnupg.GPG()
gpg.import_keys(private_key_text)
gpg.trust_keys('D13483D074B46132D15258655434DE21A921F55F', 'TRUST_ULTIMATE')

END_PYTHON

--------------------------------- cell outputs ---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


========== bash cell | list the imported public key using the gpg cli ==========

echo Public keys:
echo
gpg --list-keys
echo

echo Private keys:
echo
gpg --list-secret-keys
echo

--------------------------------- cell outputs ---------------------------------
Public keys:

/mnt/gnupg-api/.gnupg-runtime/.gnupg/pubring.kbx
------------------------------------------------
pub   rsa1024 2023-03-28 [SCEA]
      D13483D074B46132D15258655434DE21A921F55F
uid           [ultimate] repro user <repro@repros.dev>


Private keys:

/mnt/gnupg-api/.gnupg-runtime/.gnupg/pubring.kbx
------------------------------------------------
sec   rsa1024 2023-03-28 [SCEA]
      D13483D074B46132D15258655434DE21A921F55F
uid           [ultimate] repro user <repro@repros.dev>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=== bash cell | sign and verify the digest for repro@repros.dev (detach=True) ===

python3 << END_PYTHON

import gnupg

# Read the message from the file
with open("data/message.txt", "r") as msg_file:
    msg_text = bytes(msg_file.read(), "utf-8")

# Sign the message with the private key
gpg = gnupg.GPG()
signed_text = gpg.sign(msg_text, keyid="repro@repros.dev", passphrase="repro", detach=True)
# Write the signed message to a file
with open("data/signature.asc", "w") as text_file:
    text_file.write(str(signed_text))

verified = gpg.verify_data("data/signature.asc", msg_text)
if not verified: 
    raise ValueError("Signature could not be verified!")
else:
    print("Signature is verified successfully!")

END_PYTHON

--------------------------------- cell outputs ---------------------------------
Signature is verified successfully!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=== bash cell | sign and verify the digest for repro@repros.dev (detach=False) ===

python3 << END_PYTHON

import gnupg

# Read the message from the file
with open("data/message.txt", "r") as msg_file:
    msg_text = bytes(msg_file.read(), "utf-8")

# Sign the message with the private key
gpg = gnupg.GPG()
signed_text = gpg.sign(msg_text, keyid="repro@repros.dev", passphrase="repro", detach=False)
# Write the signed message to a file
with open("data/message_with_signature.asc", "w") as text_file:
    text_file.write(str(signed_text))

verified = gpg.verify(signed_text.data)
if not verified: 
    raise ValueError("Signature could not be verified!")
else:
    print("Signature is verified successfully!")

END_PYTHON

--------------------------------- cell outputs ---------------------------------
Signature is verified successfully!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


