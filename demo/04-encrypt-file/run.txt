============= bash cell | delete the gnupg home directory and keys =============

# delete contents of GnuPG home directory for this REPRO
gnupg-runtime.purge-keys

--------------------------------- cell outputs ---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


============ bash cell | import the public key for repro@repros.dev ============

python3 << END_PYTHON

import gnupg

# read the public key from the file
with open("data/public.gpg", "r") as public_key_file:
    public_key_text = public_key_file.read()

# import the public key and trust it
gpg = gnupg.GPG()
gpg.import_keys(public_key_text)
gpg.trust_keys('D13483D074B46132D15258655434DE21A921F55F', 'TRUST_ULTIMATE')

END_PYTHON

--------------------------------- cell outputs ---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


========== bash cell | list the imported public key using the gpg cli ==========

echo Public keys:
echo
gpg --list-keys
echo

echo Private keys:
echo
gpg --list-secret-keys
echo


--------------------------------- cell outputs ---------------------------------
Public keys:

/mnt/gnupg-api/.gnupg-runtime/.gnupg/pubring.kbx
------------------------------------------------
pub   rsa1024 2023-03-28 [SCEA]
      D13483D074B46132D15258655434DE21A921F55F
uid           [ultimate] repro user <repro@repros.dev>


Private keys:


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=============== bash cell | encrypt a file using the public key ================

python3 << END_PYTHON

import gnupg

# read the message from a file
with open("data/message.txt", "r") as message_file:
    message = message_file.read()
print(message)

# use the public key to encrypt the message
gpg = gnupg.GPG()
key = gpg.list_keys().key_map['D13483D074B46132D15258655434DE21A921F55F']
encrypted_message = gpg.encrypt(message, key['keyid'])
print(encrypted_message.status)

# write the encrypted message to a file
with open("tmp/encrypted_message.asc", "w") as text_file:
    text_file.write(str(encrypted_message))

END_PYTHON

--------------------------------- cell outputs ---------------------------------
Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod tempor
incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex
ea commodi consequatur. Quis aute iure reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

encryption ok
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=========== bash cell | import the private key for repro@repros.dev ============

python3 << END_PYTHON

import gnupg

# read the private key from the file
with open("data/private.asc", "r") as private_key_file:
    private_key_text = private_key_file.read()

# import the private key
gpg = gnupg.GPG()
gpg.import_keys(private_key_text)

END_PYTHON

--------------------------------- cell outputs ---------------------------------
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


========== bash cell | list the imported keys again using the gpg cli ==========

echo Public keys:
echo
gpg --list-keys
echo

echo Private keys:
echo
gpg --list-secret-keys
echo

--------------------------------- cell outputs ---------------------------------
Public keys:

/mnt/gnupg-api/.gnupg-runtime/.gnupg/pubring.kbx
------------------------------------------------
pub   rsa1024 2023-03-28 [SCEA]
      D13483D074B46132D15258655434DE21A921F55F
uid           [ultimate] repro user <repro@repros.dev>


Private keys:

/mnt/gnupg-api/.gnupg-runtime/.gnupg/pubring.kbx
------------------------------------------------
sec   rsa1024 2023-03-28 [SCEA]
      D13483D074B46132D15258655434DE21A921F55F
uid           [ultimate] repro user <repro@repros.dev>


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


================ bash cell | decrypt the message encrpted above ================

python3 << END_PYTHON

import gnupg

# read the encrypted message from a file
with open("tmp/encrypted_message.asc", "r") as encrypted_message_file:
    encrypted_message = encrypted_message_file.read()

# decrypt the message using the private key
gpg = gnupg.GPG()
decrypted_data = gpg.decrypt(encrypted_message, passphrase='repro')
print(decrypted_data.status)

# print the decrypted message
print()
print(str(decrypted_data))

END_PYTHON

--------------------------------- cell outputs ---------------------------------
decryption ok

Lorem ipsum dolor sit amet, consectetur adipisci elit, sed eiusmod tempor
incidunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex
ea commodi consequatur. Quis aute iure reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat cupiditat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


